snippet_support = true
verbosity = 2

[server]
timeout = 1800 # seconds = 30 minutes

# [language.vx]
# # The filetype variable is set in vlang.kak for .v, .vsh, .vv, .c.v under the name "v"
# filetypes = ["v"]
# roots = ["mod.v", ".git/"]
# command = "v"
# args = ["ls"]

[language.v]
# The filetype variable is set in vlang.kak for .v, .vsh, .vv, .c.v under the name "v"
filetypes = ["v"]
roots = ["mod.v"]
command = "v-analyzer"
# command = "analyze_v_analyzer.sh"
# command = "systemd-run"
# args = ["--scope", "-p", "MemoryLimit=500M", "v-analyzer"]

# [language.c_cpp]
# filetypes = ["c", "cpp"]
# # List of file names to determine a project root directory.
# # If a parent directory of the current file contains one of these, then it's the root.
# roots = [".ccls-root", "compile_commands.json"]
# command = "ccls"
# # completion: kak-lsp does not support newText https://github.com/ul/kak-lsp/issues/40
# # clang.extraArgs: make sure to keep the isystem include order because of duplicate definitions with /usr/include/
# args = [
#     "--log-file=/tmp/ccls.log",
#     """--init={"cache":{"directory":"/tmp/ccls-cache"}, "completion":{"detailedLabel":false}, "clang": {"resourceDir": "/usr/lib/clang/14.0.0/include", "extraArgs": ["-isystem /usr/include/x86_64-linux-gnu/c++/11","-stdlib=libstdc++","-std=c++20"]}}"""
#     ]

[language.c_cpp]
filetypes = ["c", "cpp"]
# List of file names to determine a project root directory.
# If a parent directory of the current file contains one of these, then it's the root.
roots = [".ccls", "compile_commands.json"]
command = "ccls"
# completion: kak-lsp does not support newText https://github.com/ul/kak-lsp/issues/40
# get extraArgs with
# clang -v -fsyntax-only -x c++ /dev/null
# get resourceDir with
# clang -print-resource-dir
# args =	[
#     "--log-file=/tmp/ccls.log",
#     """--init=	{
# 		    	"cache":
# 		    		{"directory":"/tmp/ccls-cache"},
# 		    	"completion":
# 		    		{"detailedLabel":false},
# 		    	"clang": {
# 		    		"extraArgs": [
#               "-isystem /home/anton/workspace/gcc-build-master/gcc/include",
#               "-I /home/anton/workspace/CppBry/third_party/json/include",
#               "-I /home/anton/workspace/spdlog/include",
#               "--gcc-toolchain=/home/anton/workspace/gcc-build-master"
# 		    		],
# 		    		"resourceDir": "/home/anton/workspace/gcc-build-master"
# 		    	}
# 		}
#     """
# 	]
args =	[
    "--log-file=/tmp/ccls.log",
    """--init=	{
		    	"cache":
		    		{"directory":"/tmp/ccls-cache"},
		    	"completion":
		    		{"detailedLabel":false},
		    	"clang": {
		    		"extraArgs": [
              "-isystem /home/anton/workspace/gcc-build-master/gcc/include",
              "-I /home/anton/workspace/CppBry/third_party/json/include",
              "-I /home/anton/workspace/spdlog/include"
		    		],
		    		"resourceDir": "/usr"
		    	}
		}
    """
	]

[language.cmake]
filetypes = ["cmake"]
roots = ["CMakeLists.txt", ".git", ".hg"]
command = "cmake-language-server"

[language.pyls]
filetypes = ["python"]
roots = ["requirements.txt", "setup.py", ".git", ".hg"]
command = "pyls"
settings_section = "_"
[language.pyls.settings._]
# See https://github.com/python-lsp/python-lsp-server#configuration
# pylsp.configurationSources = ["flake8"]
pyls.plugins.jedi_completion.include_params = true

### Latex lsp using texlab & pdf preview using evince
# https://github.com/kak-lsp/kak-lsp/blob/master/kak-lsp.toml
# https://github.com/latex-lsp/texlab/wiki/Previewing#evince
# evince requires https://github.com/latex-lsp/evince-synctex
# TODO
# [language_server.texlab]
# filetypes = ["latex"]
# roots = [".git", ".hg"]
# command = "texlab"
# [language_server.texlab.settings.texlab]


[semantic_tokens]
faces = [
    {face="documentation", token="comment", modifiers=["documentation"]},
    {face="comment", token="comment"},
    {face="function", token="function"},
    {face="keyword", token="keyword"},
    {face="module", token="namespace"},
    {face="operator", token="operator"},
    {face="string", token="string"},
    {face="type", token="type"},
    {face="default+d", token="variable", modifiers=["readonly"]},
    {face="default+d", token="variable", modifiers=["constant"]},
    {face="variable", token="variable"},
]

